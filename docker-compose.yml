version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: coursify-postgres
    environment:
      POSTGRES_DB: coursify_db
      POSTGRES_USER: coursify_user
      POSTGRES_PASSWORD: coursify_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - coursify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coursify_user -d coursify_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: coursify-redis
    command: redis-server --appendonly yes --requirepass coursify_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - coursify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Coursify Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: coursify-app
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://coursify_user:coursify_password@postgres:5432/coursify_db
      REDIS_URL: redis://:coursify_redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coursify-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: coursify-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - coursify-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  coursify-network:
    driver: bridge
